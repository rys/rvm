#!/usr/bin/env bash

# Checks to see if a package is even available in Debian or Ubuntu without
# having to know the distro specifics.  So if you send it a list of
# depenencies it will take the list and only return the ones that are
# available with apt.

requirements_debian_fallback_lib_available()
{
  typeset __package
  for __package
  do
    if apt-cache show "${__package}" >/dev/null 2>&1
    then
      __available_dependencies+=("${__package}")
    fi
  done
}

# Takes a list of packages that we want to check for "alternates" and if
# any of them are installed then we return the first one installed and
# if none of them are installed we send back our preference which should
# always be the first one to check for when passing in the list.
#
# requirements_debian_fallback_lib_installed "git" "git-core"
#   -> Is git-core installed?
#      -> Return "git-core" because they prefer it.
#   -> Git-core is not installed, we prefer "git" return it.

requirements_debian_fallback_lib_installed()
{
  typeset __package
  for __package
  do
    if requirements_debian_lib_installed "${__package}"
    then
      __dependencies+=( "${__package}" )
      return 0
    fi
  done

  __dependencies+=( "$1" )
}

# Takes a list of dependencies and first sees if they are available and then
# takes the ones that are avilable and checks to see if any of them are
# installed finally returning either the one that is installed or the one
# that we recommend.  So:
#
# requirements_debian_fallback_lib "openjdk-7-headless" "openjdk-6-headless"
#   -> Are they all available?
#      -> Returns ("openjdk-7-headless" "openjdk-6-headless")
#   -> Are any of them installed?
#      -> If yes (openjdk-6-headless) then return openjdk-6-headless.
#      -> If no then we return openjdk-7-headless since we prefer it here.

requirements_debian_fallback_lib()
{
  typeset -a __available_dependencies
  requirements_debian_fallback_lib_available "$@"
  requirements_debian_fallback_lib_installed "${__available_dependencies[@]}"
}

# Returns the arch:
#   amd64 || i386 or other doesn't matter to us.

requirements_debian_arch()
{
  __architecture="$(dpkg --print-architecture)"
}

# Queries the dpkg system for packages that are installed only asking about
# the package name and it's arch, unlike previous version this version
# does infact account for both virtual (depends, sometimes it won't) and
# meta-packages when accounting for an architecture, so feel free to use
# this all over the place if you want.

requirements_debian_lib_installed()
{
  dpkg-query -s "$1:${__architecture}" >/dev/null 2>&1 || return $?
}

# Installs a lib with apt automatically without any user interaction.
# TODO: Make this so a user can disable the --yes part and approve
#       the updates before they even happen.  Some people don't exactly
#       like being left outside of the loop when installing stuffs.

requirements_debian_libs_install()
{
  __rvm_try_sudo apt-get --no-install-recommends --yes install "$@" || return $?
}

# Installs missing packages for Debian but this should probably be cleaned.

requirements_debian_ensure_libs()
{
  typeset -a packages_installed packages_missing packages_to_install
  __rvm_filter_installed_packages debian "$@" || return $?
}

# Common MRI dependencies.

requirements_common_mri_dependencies()
{
  __dependencies=(
    g++ gcc make libc6-dev patch openssl ca-certificates libreadline6
    libreadline6-dev curl zlib1g zlib1g-dev libssl-dev libyaml-dev
    libsqlite3-dev sqlite3 libxml2-dev libxslt1-dev autoconf libc6-dev
    libgdbm-dev libncurses5-dev automake libtool bison pkg-config libffi-dev
  )
}

# The actual code that runs when you do rvm install jruby-head, ruby2.0.0
# or whatever you are installing.

requirements_debian_run()
{
  typeset -a __dependencies
  typeset __architecture
  requirements_debian_arch

  case "$1" in
    (update-system)
      rvm_requiremnts_fail_or_run_action 3 \
        "Skipping \`apt-get update\` make sure your system is up to date." \
        __rvm_try_sudo apt-get --quiet --yes update || return $?
      ;;

    (rvm)
      requirements_debian_ensure_libs bash curl patch bzip2 ca-certificates
      ;;

    (jruby*head)
      __dependencies=("g++", "ant")
      requirements_debian_fallback_lib openjdk-7-jdk opendjk-6-jdk
      requirements_debian_fallback_lib git git-core
      requirements_debian_ensure_libs "${__dependencies[@]}"
      ;;

    (jruby*)
      __dependencies=("g++")
      requirements_debian_fallback_lib \
        openjdk-7-jre-headless openjdk-7-jdk \
        openjdk-6-jre-headless opendjk-6-jdk #
      requirements_debian_ensure_libs "${__dependencies}"
      ;;

    (ir*)
      requirements_debian_ensure_libs curl mono-2.0-devel
      ;;

    (opal)
      requirements_debian_ensure_libs nodejs npm
      ;;

    (*-head)
      requirements_common_mri_dependencies
      requirements_debian_fallback_lib git git-core
      requirements_debian_ensure_libs "${__dependencies[@]}"
      ;;

    (*)
      requirements_common_mri_dependencies
      requirements_debian_ensure_libs "${__dependencies[@]}"
      ;;
  esac
}

requirements_ubuntu_run()
{
  requirements_debian_run "$@"
}
